import string

export extern vizify {
  struct TextLayoutEngine {
  }

  # A vizapp uses this to request a desired font
  struct Font {
    name: str  # Default null
    family: str # ["sans", "serif", "monospace"] Default: "sans"
    weight: int   # Default 300
    italic: bool  # Default false
    condensed: bool  # Default false
  }

  # Don't construct objects of this type!
  # Use getFontMetrics() to obtain a struct of this type.
  struct FontMetrics {
    size: int
    xheight: float 
    cap: float 
    ascender: float 
    descender: float 
  }

  method measureTextWidth (tutil: TextLayoutEngine, text: str, font: Font, pxFontSize: int) : float
  method getFontMetrics (tutil: TextLayoutEngine, font: Font, pxFontSize: int) : FontMetrics
}

#
# Internal use only!  Only for the paragraph-processing method shown below!
# The extract(startIndex, count) method returns a list containing the selected elements from a given list.
# If the count is 0, the result is an empty list.
# If the count is -1, the semantics are "return the entire sublist starting from given start index to the END OF THE LIST."
#
method extract(haystack: list<str>, start:int, count:int) : list<str> {
  mut result: list<str> = []
  mut numToExtract = count
  if (count == 0) {
    return result
  }
  if count < 0 {
    numToExtract = haystack.length - start
  }
  for i = start upto start+count {
    result.push(haystack[i])
  }
  return result
}

#
# Internal use only!  Only for the paragraph-processing method shown below!
#
method tokenizeByWhiteSpace(haystackIn: str) : list<str> {
  let haystack = haystackIn.trim()
  let result: list<str> = []
  mut curAccum = ""
  mut inWhiteSpace = false
  for i = 0 upto haystack.length {
    let curChar = haystack.at(i)
    if (curChar == " ") {
      inWhiteSpace = true
    }else{
      if (inWhiteSpace) {
        result.push(curAccum)
        curAccum = ""
        inWhiteSpace = false
      }
    }
    curAccum = curAccum + curChar
  }
  result.push(curAccum)
  return result
}

export struct LineLayout {
  text: str = ""
  left: int = 0
  width: int = 0
  lineHeight: float = 0f
}

export struct ParagraphConfig {
 width: float = 100f
 height: float = 100f
 font: Font = new Font
 fontSize: int = 10
 lineHeight: float = 1.32
 textAlign: str = "left"
 verticalAlign: str = "top"
}

export struct TextLayout {
  font: Font = null
  size: int = 0
  contentHeight: float = 0f
  verticalOffset: float = 0f
  lines: list<LineLayout> = []
  width: int = 0
  height: int = 0
}

#
# TextLayoutEngine#paragraph
#
export method paragraph (tutil: TextLayoutEngine, text: str, settings: ParagraphConfig) : TextLayout {
  let width = settings.width
  let height = settings.height
  let font = settings.font

  # In the future we will support splitting the text into paragraphs based on \r\n delimiters.
  let linesIn: list<str> = [ text ]
  let linesOut: list<list<str>> = []

  for i=0 upto linesIn.length {

    # Consider this line: "And this shall be the most interesting thing.  And this shall be."
    # The result of the match will be: ["And ", "this ", "shall ", "be ", "the ", "most ", "interesting ", "thing.  ", "And ", "this ", "shall ", "be.", ""]
    # After the filtering, the result will be the same EXCEPT that empty string at the very end will be gone.
    mut chunks: list<str> = linesIn[i].tokenizeByWhiteSpace()       #match(/\S*\s*/g).filter(function(s) { return s.length })
    let line: list<str> = []

    # Find out how many words to chomp
    while (chunks.length) {
      mut max: int = chunks.length
      mut min: int = 1
      mut prevMax = 99999
      mut prevMin = 0
      while (true) {
        prevMax = max
        prevMin = min
        let cur = (min.asFloat() + (max - min).asFloat()/2f).round()
        let thisTest = chunks.extract(0, cur).join("").trim()
        let mwidth = tutil.measureTextWidth(thisTest, font, settings.fontSize)
        if (mwidth > width) {
          max = cur
        } else {
          min = cur
        }

        if ((max == min) || (((prevMax == max) && (prevMin == min)))) {
          break
        }
      }

      # Chomp
      line.push(chunks.removeRange(0, min).join("").trim())
    }
    linesOut.push(line)
  }

  # Flatten lines
  let resultA: list<str> = []
  for ii=0 upto linesOut.length {
    for jj=0 upto linesOut[ii].length {
      resultA.push(linesOut[ii][jj])
    }
  }

  # Calculate line metrics
  mut maxWidth = 0

  let resultB: list<LineLayout> = []

  # Get metrics for this font/size
  # var m = metrics.get(font.family, font.style, settings.fontSize)
  let lineHeightCalc = settings.fontSize.asFloat() * 1.07 * settings.lineHeight

  for idxLine = 0 upto resultA.length {
    let line = resultA[idxLine]

    # Determine line width
    let w = tutil.measureTextWidth(line, font, settings.fontSize)
    if (w > maxWidth) {
      maxWidth = w
    }

    # Adjust for text alignment
    mut xleft: int = 0
    if (settings.textAlign == "center") {
      xleft = ((width - w) / 2f).round()
    }
    else if (settings.textAlign == "right") {
      xleft = (width - w).round()
    }

    resultB.push(new LineLayout {
      text = line
      left = xleft
      lineHeight = lineHeightCalc
      width = w.round()
    })
  }

  # Adjust vertical offset to fit in space
  mut verticalOffsetCalc = 0
  let contentHeightCalc = resultB.length.asFloat() * lineHeightCalc
  if (contentHeightCalc < height) {
    if (settings.verticalAlign == "middle") {
      verticalOffsetCalc = ((height / 2f) - (contentHeightCalc / 2f)).round()
    }
    else if (settings.verticalAlign == "bottom") {
      verticalOffsetCalc = height - contentHeightCalc
    }
  }

  return new TextLayout {
    font = font
    contentHeight = contentHeightCalc
    verticalOffset = verticalOffsetCalc.asFloat()
    size = settings.fontSize
    lines = resultB
    width = width.round()
    height = height.round()
  }
}
