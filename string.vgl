
# Returns the given input string after dropping all white space at the start of the string.
# The only whitespace supported at this time is the space character.
export method trimStart(s:str) : str {
  mut result = ""
  mut boolStillTrimming = true
  for i = 0 upto s.length {
    if (boolStillTrimming) {
      if (s.at(i) != " ") {
        result = result + s.at(i)
        boolStillTrimming = false
      }
    }else{
      result = result + s.at(i)
    }
  }
  return result
}

# Returns the given input string after dropping all white space at the end of the string.
# The only whitespace supported at this time is the space character.
export method trimEnd(s:str) : str {
  mut result = ""
  mut boolStillTrimming = true
  for i = (s.length - 1) downto -1 {
    if (boolStillTrimming) {
      if (s.at(i) != " ") {
        result = s.at(i) + result
        boolStillTrimming = false
      }
    }
    else{
      result = s.at(i) + result
    }
  }
  return result
}

# Returns the given input string after dropping all white space at both the start and the end of the string.
# The only whitespace supported at this time is the space character.
export method trim(s:str) : str {
  return s.trimStart().trimEnd()
}

# Returns the result of concatenating the given list of strings, using the given
# delimiter as a separator between each pair in the concatenation.
export method join(strset: list<str>, delim: str) : str {
  mut result = ""
  for i = 0 upto (strset.length-1) {
    result = result + strset[i] + delim
  }
  result = result + strset[strset.length-1]
  return result
}
