import color

export extern vizify {
  
  #
  # CANVAS OBJECT is mostly opaque, with its only two public properties providing size information.
  # Size may change during the lifetime of the movie; see the "Layout" topic for more information
  # on runtime dynamic size adaptation.
  #
  struct Canvas {
    width : int
    height : int
  }

  #
  # APPEARANCE ATTRIBUTES: "sticky" states that affect the appearance
  # of generated primitives.
  # These are all subject to the save/restore stack.
  #
  method setFillStyle (c:Canvas, val:Color)
  method setStrokeStyle (c:Canvas, val:Color)
  method setGlobalAlpha (c:Canvas, val:float)
  method setLineWidth (c:Canvas, val:float)
  method setLineDash(c:Canvas, dashspec : list<int>)
  method setFont (c:Canvas, fontFam:str, pxSize: int)

  # The mask mode can be used to restrict subsequent rendering actions to only
  # certain pixels on the canvas, based on whether that destination pixel is or isn't
  # already containing a color value.
  # The supported modes are:
  #   "normal" (default: no masking effect)
  #   "mask" (only the already-painted portion of the canvas will be writeable)
  #   "reverse-mask" (only the not-yet-painted portion of the canvas will be writeable)
  # This attribute is also subject to the save/restore stack.
  method setGlobalMaskMode(c:Canvas, mode:str)

  #
  # ACCUMULATIVE TRANSFORMATIONS -- each use of one of these methods
  # has an accumulative effect on the current 2D transformation matrix.
  # Note that the transf matrix is subject to save/restore stack.
  #
  method translate(c : Canvas, x:float, y:float)
  method scale(c : Canvas, x:float, y:float)
  method rotate(c : Canvas, angleInRadians:float)

  #
  # CLIP REGION
  #
  # By default, there is no clip region; clipping is disabled.
  # To temporarily apply a clip rectangle to limit the impact of primitives to
  # a given rectangular region:
  # 1) Save the current attribute state.
  # 2) Use startClip to specify the desired temporary region.
  # 3) Generate the primitives that should be clipped thusly.
  # 4) Restore the saved attribute state (the only way to disable the temporary clipping).
  #
  # Keep in mind: your specification of the clip region is subjected to
  # the current 2D transformation matrix.
  #
  method startClip(c : Canvas, x:float, y:float, w:float, h:float)

  #
  # ATTRIBUTE-STATE STACK CONTROL
  #
  # As mentioned above, there is a set of attributes that is 
  # subject to the save/restore stack, allowing a module to make
  # "temporary" modifications to attributes followed by restoration
  # of the "original" attribute states.
  #
  method save(c : Canvas)
  method restore(c : Canvas)

  #
  # 2-D PRIMITIVES
  #
  # Most 2D primitives are generated via a multi-step process (see below).
  #
  # The only methods that generate a primitive via a single call are these:
  method fillRect(c : Canvas, x:float, y:float, w:float, h:float)
  method fillText(c : Canvas, text: str, x: float, y: float)
  method drawImage(c : Canvas, img : str, x : float, y : float)
  method drawImageSized(c : Canvas, img : str, x : float, y : float, w : float, h : float)

  # To generate a primitive using the multi-step process, you start by
  # initiating construction of a "path":
  method beginPath(c : Canvas)

  # You then accumulate a path via calls to any of these:
  method arc(c : Canvas, xOrb:float, yOrb:float, radius:float, angleStart:float, angleEnd:float, counterClockwise:bool)
  method rect(c : Canvas, x : float, y : float, w : float, h : float)
  method bezierCurveTo(c : Canvas, x1:float, y1:float, x2:float, y2:float, x3:float, y3:float)
  method quadraticCurveTo(c : Canvas, x1:float, y1:float, x2:float, y2:float)
  method moveTo(c : Canvas, x : float, y : float)
  method lineTo(c : Canvas, x : float, y : float)

  # You then close the path and do both/either a stroke and/or fill action.
  # The appearance of a path stroke is primarily determined by the 
  #   line-width, line-dash, and stroke-style attributes.
  # The appearance of a path fill is primarily determined by the
  #   fill-style attribute.
  # Of course, other attributes (e.g. the alpha, the mask) will 
  #   have an impact on appearance as well.
  method closePath(c : Canvas)
  method stroke(c : Canvas)
  method fill(c : Canvas)

  #
  # COMPUTATION/INQUIRY
  #
  # The only inquiry operations associated with the Canvas object
  # are these shown below:
  
  # Allows inquiry of the current global-alpha floating-point number.
  # This is useful since the alpha is not accumulative, but accumulation
  # can be achieved by inquiring and then modifying the global alpha.
  method getGlobalAlpha (c:Canvas) : float
  
  # This method's computation is based on the current value of the
  # font attribute (both the font family and the pixel-based font size).
  method measureTextWidth(c : Canvas, text: str) : float
}
