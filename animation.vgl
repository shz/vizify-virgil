import env
import clock
import canvas
import easing

export struct Animation<'T> {
  rc : RenderContext<'T> = null
  i : func<int, float> = null
  o : func<int, float> = null
}

export method perform(a : Animation<'T>, action : func<Canvas, float, void>) : RenderContext<'T> {
  let root = a.rc.fork()
  root.config.operations.push(lambda(ctx : Canvas, clock : Clock) {
    let v = a.i(clock.fromStart) - a.o(clock.fromEnd)
    action(root.c, v)
  })
  return root
}

export method tween(renderc : RenderContext<'T>,
                    inf : func<int, float>,
                    outf : func<int, float>) : Animation<'T> {

  return new Animation({
    rc = renderc
    i = inf
    o = outf
  })
}

# Utility methods for doing symmetric tweens

export method ease(rc : RenderContext<'T>, i : int, o : int) : Animation<'T> {
  return rc.tween(ease(i), ease(o))
}

export method linear(rc : RenderContext<'T>, i : int, o : int) : Animation<'T> {
  return rc.tween(linear(i), linear(o))
}


# Sample implementation of an animation method

export method fade(a : Animation<'T>) : RenderContext<'T> {
  return a.perform(lambda(c : Canvas, v : float) {
    c.setGlobalAlpha(v)
  })
}

export method delay(rc : RenderContext<'T>, amount : int) : RenderContext<'T> {
  let root = rc.fork()
  root.config.start = amount
  return root
}

export method duration(rc : RenderContext<'T>, amount : int) : RenderContext<'T> {
  let root = rc.fork()
  root.config.duration = amount
  root.config.end = -1
  return root
}

export method until(rc : RenderContext<'T>, amount : int) : RenderContext<'T> {
  let root = rc.fork()
  root.config.duration = -1
  root.config.end = amount
  return root
}

export method draw(rc : RenderContext<'T>, f : func<RenderContext<'T>, void>) {
  # Sanity check on duration
  if ( (rc.config.end > 0) && (rc.config.duration > -1) ) {
    # TODO: throw new Error('This chain has both an end time and a duration, which is invalid')
  }

  # Do some timing calculation
  let fromStart = rc.clock.fromStart - rc.config.start
  let fromEnd = (rc.config.duration < 0) ? (rc.clock.fromEnd - rc.config.end) : (rc.config.start + rc.config.duration - rc.clock.fromStart)

  # Skip if we don't need to be drawn right now
  if ((fromStart < 0) || (fromEnd < 0)) {
    return void
  }

  # Create a new, time-adjusted render context for the actual call
  let root = rc.fork()
  root.clock.fromStart = fromStart
  root.clock.fromEnd = fromEnd
  root.clock.percent = 1f * fromStart / (fromStart + fromEnd)
  root.config.duration = -1
  root.config.end = 0
  root.config.start = 0

  # Apply the operation stack
  rc.c.save()
  for i = 0 upto rc.config.operations.length {
    rc.config.operations[i](rc.c, rc.clock)
  }

  # Now that we've used the operations stack, wipe it so that child
  # draw() calls don't inherit the operations themselves.
  root.config.operations = new list<func<Canvas, Clock, void>>()
  f(root)

  # Undo the effects of the operation stack
  rc.c.restore()
}
