import env
import clock
import canvas
import easing

#
# An Animation object specifies the dynamic motion of a single floating-point number
# as it travels from 0f to 1f, holds at 1f, and then travels from 1f back to 0f,
# over the duration of a RenderContext's clock timespan.
#
# The "i" and "o" functions determine the exact duration and shape of the 0f->1f and 1f->0f dynamics.
#
# The methods on this object allow the use of that floating-point number to 
# apply some geometric or appearance-level transformation to a subsequently specified
# set of 2D primitives.
#
# Animation objects are created by invoking the RenderContext#tween method.
#
export struct Animation<'T> {
  rc : RenderContext<'T> = null
  i : func<int, float> = null
  o : func<int, float> = null
}

export method tween(rc1 : RenderContext<'T>, i1 : func<int, float>, o1 : func<int, float>) {
  return new Animation<'T> {
    rc = rc1
    i = i1
    o = o1
  }
}

#
# Creates a tweening function suitable for passing to the RenderContext::tween method,
# by manipulating a given tweening function to implement a hold at the start
# of the timespan.
#
# If the result of hold() is passed as the "i1" param to tween(), then the hold-at-zero
# will occur at the start of the timespan.
#
# If the result of hold() is passed as the "o1" param to tween(), then the hold-at-zero
# will occur at the end of the timespan.
#
export function hold(dur : int, f : func<int, float>) : func<int, float> {
  return lambda(t : int) : float {
    if t <= dur {
      return 0f
    } else {
      return f(t - dur)
    }
  }
}


export method perform(a : Animation<'T>, action : func<Canvas, float, void>) : RenderContext<'T> {
  let root = a.rc.fork()
  root.config.operations.push(lambda(ctx : Canvas, clock : Clock) {
    let v = (clock.fromStart <= a.durHoldAtZeroStart) ? 0f : (a.i(clock.fromStart-a.durHoldAtZeroStart) - (1f - a.o(clock.fromEnd)))
    action(root.c, v)
  })
  return root
}

export method linear(rc : RenderContext<'T>, i : int, o : int) : Animation<'T> {
  return rc.tween(linear(i), linear(o))
}




# Sample implementations of animation methods

export method fade(a : Animation<'T>) : RenderContext<'T> {
  return a.perform(lambda(c : Canvas, v : float) {
    c.setGlobalAlpha(v)
  })
}

export method fadeFromTo(a : Animation<'T>, from:float, to:float) : RenderContext<'T> {
  return a.perform(lambda(c : Canvas, v : float) {
    c.setGlobalAlpha(from + (to-from)*v)
  })
}

export method translate(a : Animation<'T>, xMax : float, yMax : float) : RenderContext<'T> {
  return a.perform(lambda(c : Canvas, v : float) {
    c.translate(v*xMax, v*yMax)
  })
}

# Rotates 
export method rotate(a : Animation<'T>, angleMax : float) : RenderContext<'T> {
  return a.perform(lambda(c : Canvas, v : float) {
    c.rotate(v*angleMax)
  })
}

# Scales X from <given> to 1
# Scales Y from <given> to 1
export method scaleFrom(a : Animation<'T>, xmin : float, ymin : float) : RenderContext<'T> {
  return a.perform(lambda(c : Canvas, v : float) {
    c.scale(xmin + (v * (1f - xmin)), ymin + (v * (1f - ymin)))
  })
}




# Clock-context manipulation

export method delay(rc : RenderContext<'T>, amount : int) : RenderContext<'T> {
  let root = rc.fork()
  root.config.start = amount
  return root
}

export method duration(rc : RenderContext<'T>, amount : int) : RenderContext<'T> {
  let root = rc.fork()
  root.config.duration = amount
  root.config.end = -1
  return root
}

export method until(rc : RenderContext<'T>, amount : int) : RenderContext<'T> {
  let root = rc.fork()
  root.config.duration = -1
  root.config.end = amount
  return root
}





export method apply(rc : RenderContext<'T>, f : func<RenderContext<'T>, void>) {
  # Sanity check on duration
  if rc.config.end > 0 && rc.config.duration > -1 {
    # TODO: throw new Error('This chain has both an end time and a duration, which is invalid')
  }

  # Do some timing calculation
  mut fromStart = rc.clock.fromStart - rc.config.start
  mut fromEnd = (rc.config.duration < 0) ? (rc.clock.fromEnd - rc.config.end) : (rc.config.start + rc.config.duration - rc.clock.fromStart)


  # Skip if we don't need to be drawn right now
  if fromStart < 0 || fromEnd < 0 {
    return void
  }

  # Create a new, time-adjusted render context for the actual call
  let root = rc.fork()
  root.clock.fromStart = fromStart
  root.clock.fromEnd = fromEnd
  root.clock.percent = fromStart.asFloat() / (fromStart + fromEnd).asFloat()
  root.config.duration = -1
  root.config.end = 0
  root.config.start = 0

  # Apply the operation stack
  root.c.save()
  for i = 0 upto root.config.operations.length {
    root.config.operations[i](root.c, root.clock)
  }

  # Now that we've used the operations stack, wipe it so that child
  # draw() calls don't inherit the operations themselves.
  root.config.operations = new list<func<Canvas, Clock, void>>
  f(root)

  # Undo the effects of the operation stack
  rc.c.restore()
}
